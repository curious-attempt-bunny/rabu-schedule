require 'socket'
require 'timeout'

task :default => :jstestdriver_server

BIN_DIR = "bin"
BUILD_DIR = "build"

JSTESTDRIVER_JAR = "#{BIN_DIR}/JsTestDriver-1.3.1.jar"
JSTESTDRIVER_PORT = 4224
JSTESTDRIVER_PID_FILE = "#{BUILD_DIR}/jstestdriver.pid"
JSTESTDRIVER_TIMEOUT_IN_SEC = 10


directory BUILD_DIR

desc "Erase all generated files"
task :clean => [:shutdown] do       # must shut down because the pid file is in build directory
    explain "Cleaning build" do
        rm_rf BUILD_DIR
    end
end

# desc "Start the JsTestDriver server"
task :jstestdriver_server => [BUILD_DIR] do
    next if JsTestDriver::is_running?
    explain "Starting JsTestDriver (use 'rake shutdown' to stop)" do
        JsTestDriver::launch
    end
end

desc "Shut down the JsTestDriver server"
task :shutdown do
    next unless JsTestDriver::is_running?
    explain "Shutting down JsTestDriver" do
        JsTestDriver::terminate
    end
end

def explain(headline, &block)
    puts
    puts bright(headline)
    block.call
end

def bright(text)
    return "\033[1m#{text}\033[0m";
end


class JsTestDriver
    def self.launch
        pid = run_in_background("java -jar #{JSTESTDRIVER_JAR} --port #{JSTESTDRIVER_PORT}")
        File.open(JSTESTDRIVER_PID_FILE, 'w') do |file|
            puts "echo '#{pid}' > #{JSTESTDRIVER_PID_FILE}"
            file.write(pid)
        end
        wait_for_start
    end

    def self.terminate
        pid = IO.read(JSTESTDRIVER_PID_FILE);
        puts "Terminating process #{pid}"
        Process.kill('TERM', Integer(pid))
        rm JSTESTDRIVER_PID_FILE
    end

    def self.is_running?
        is_port_open?("localhost", JSTESTDRIVER_PORT)
    end

private

    def self.wait_for_start
        begin
            print "Waiting for JsTestDriver to finish starting... "
            STDOUT.flush
            Timeout::timeout(JSTESTDRIVER_TIMEOUT_IN_SEC) do
                until is_running? do
                    sleep 0.2
                end
            end
            puts "done"
        rescue Timeout::Error
            puts "timed out"
            terminate_jstestdriver
            raise "JsTestDriver did not start within #{JSTESTDRIVER_TIMEOUT_IN_SEC} seconds"
        end
    end

    def self.run_in_background(command)
        puts "#{command} &"
        pipe = IO.popen(command)
        puts "Process ID: #{pipe.pid}"
        return pipe.pid
    end

    # This function courtesy of 'joast'
    # http://stackoverflow.com/questions/517219/ruby-see-if-a-port-is-open
    def self.is_port_open?(ip, port)
      begin
        Timeout::timeout(1) do
          begin
            s = TCPSocket.new(ip, port)
            s.close
            return true
          rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
            return false
          end
        end
      rescue Timeout::Error
      end

      return false
    end

end