require 'socket'
require 'timeout'
require 'selenium-webdriver'

BUILD_DIR = "build"
BIN_DIR = "#{BUILD_DIR}/vendor"
OUTPUT_DIR = "generated"

RHINO_JAR = "#{BIN_DIR}/rhino.jar"
JSLINTRUNNER = "#{BUILD_DIR}/jslintrunner.js"

JSTESTDRIVER_JAR = "#{BIN_DIR}/JsTestDriver-1.3.1.jar"
JSTESTDRIVER_PORT = 4224
JSTESTDRIVER_PID_FILE = "#{OUTPUT_DIR}/jstestdriver.pid"
JSTESTDRIVER_SERVER_TIMEOUT_IN_SEC = 10
JSTESTDRIVER_BROWSER_TIMEOUT_IN_SEC = 10

directory OUTPUT_DIR

desc "Erase all generated files"
task :clean => [:shutdown] do       # must shut down because the pid file is in output directory
    explain "Cleaning build" do
        rm_rf OUTPUT_DIR
    end
end

desc "Check everything"
task :default => [:check_all]
task :check_all => [:javascript, :html]

desc "Check Javascript"
task :javascript => [:js_test, :lint]

desc "Check HTML"
task :html => [:html_test, :lint]

# desc "Javascript unit tests"
task :js_test => [:startup] do
    explain "Running Javascript unit tests" do
        JsTestDriver::run_tests
    end
end

# desc "Javascript lint"
task :lint do
	explain "Running lint" do
		# NOTE: Because I haven't figured out how to pass command-line arguments
		# to Rhino scripts, jslintrunner must be configured by editing source file.
		run "java -jar #{RHINO_JAR} #{JSLINTRUNNER}"
		raise "Lint failed" if $? != 0
	end
end

# desc "HTML unit tests"
task :html_test do
    require 'src/_html_test'
    explain "Running HTML unit tests" do
        test_html
    end
end

desc "Create tested release package"
task :release => [:check_all] do
	explain "Creating release" do
	end
end

desc "Start JsTestDriver"
task :startup => [OUTPUT_DIR] do
    next if JsTestDriver::is_running?
    explain "Starting JsTestDriver (use 'rake shutdown' to stop)" do
        JsTestDriver::launch
    end
end

desc "Shut down JsTestDriver"
task :shutdown do
    next unless JsTestDriver::is_running?
    explain "Shutting down JsTestDriver server (close the JsTestDriver browser manually)" do
        JsTestDriver::terminate
    end
end

def explain(headline, &block)
    puts
    puts bright(headline)
    block.call
end

def bright(text)
    return "\033[1m#{text}\033[0m";
end

def run(command)
    puts command
    system command
end

class JsTestDriver
    COMMAND = "java -jar #{JSTESTDRIVER_JAR}"

    def self.run_tests
        begin
            Timeout::timeout(JSTESTDRIVER_BROWSER_TIMEOUT_IN_SEC) do
                result = attempt_tests
                while not result =~ /Passed: (\d+); Fails: (\d+); Errors: (\d+)/ do
                    puts "Did not find JsTestDriver browser; trying again"
                    sleep 2
                    result = attempt_tests
                end
                raise "Javascript unit tests failed" if $? != 0
            end
        rescue Timeout::Error
            puts "JsTestDriver browser has been lost"
            capture_browser
            retry
        end
    end

    def self.capture_browser
        puts "Launching JsTestDriver browser"
        url = "http://localhost:#{JSTESTDRIVER_PORT}/capture?strict"
        driver = Selenium::WebDriver.for :firefox
        driver.navigate.to url
    end

    def self.launch
        pid = run_in_background("#{COMMAND} --port #{JSTESTDRIVER_PORT}")
        File.open(JSTESTDRIVER_PID_FILE, 'w') do |file|
            puts "echo '#{pid}' > #{JSTESTDRIVER_PID_FILE}"
            file.write(pid)
        end
        wait_for_start
        capture_browser
    end

    def self.terminate
        pid = IO.read(JSTESTDRIVER_PID_FILE);
        puts "Terminating process #{pid}"
        Process.kill('TERM', Integer(pid))
        rm JSTESTDRIVER_PID_FILE
    end

    def self.is_running?
        is_port_open?("localhost", JSTESTDRIVER_PORT)
    end

private

    def self.attempt_tests
        command = "#{COMMAND} --config #{BUILD_DIR}/JsTestDriver.conf --basePath . --tests all 2>&1"
        result = ""
        puts command
        IO.popen(command) do |pipe|
            pipe.sync = true
            while c = pipe.getc
                c = c.chr
                print c
                result += c
            end
        end
        return result
    end

    def self.wait_for_start
        begin
            puts "Waiting for JsTestDriver server to start"
            Timeout::timeout(JSTESTDRIVER_SERVER_TIMEOUT_IN_SEC) do
                until is_running? do
                    sleep 0.2
                end
            end
        rescue Timeout::Error
            puts "JsTestDriver server timed out"
            terminate
            raise "JsTestDriver did not start within #{JSTESTDRIVER_SERVER_TIMEOUT_IN_SEC} seconds"
        end
    end

    def self.run_in_background(command)
        puts "#{command} &"
        pipe = IO.popen(command)
        puts "Process ID: #{pipe.pid}"
        return pipe.pid
    end

    # This function courtesy of 'joast'
    # http://stackoverflow.com/questions/517219/ruby-see-if-a-port-is-open
    def self.is_port_open?(ip, port)
      begin
        Timeout::timeout(1) do
          begin
            s = TCPSocket.new(ip, port)
            s.close
            return true
          rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
            return false
          end
        end
      rescue Timeout::Error
      end

      return false
    end

end